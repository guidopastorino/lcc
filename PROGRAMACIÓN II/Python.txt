Python (Notes)
https://www.youtube.com/watch?v=nKPbfIU442g&t=2394s 2:00:00

_______________________________________________________________________________________
TIPOS DE DATOS
# String
"String"
'String'

"""String"""
'''String
    backticks
'''


# Number
    # Int
40
    # Float
30.2
    # Complex
3 + 3j


# Boolean
True
False
_______________________________________________________________________________________
VARIABLES

nombre = "Guido"
edad = 18
masculino = True

# Template strings
# Normal
print("Hola " + nombre + " Cómo estás?")
# F strings (se utilizan la "f" delante para denotar template strings)
print(f"Hola {nombre}, de edad: {edad}, como estás?")

# Eliminar una variable
# del <var>
del nombre
print(nombre) # NameError: name 'nombre' is not defined


# Operadores de pertenencia e identidad
# "Valor" in <var> : ("Está")
print("Guido" in nombre) # True
print("Pastorino" in nombre) # False

# "Valor" not in <var> : ("no está")
print("Guido" not in nombre) # False
_______________________________________________________________________________________
DATOS COMPUESTOS

# ARRAYS
# Array que se puede modificar: []
lista1 = ["Guido", "Pastorino"]
lista1[0] = "Mark"
print(lista1)

# Array que NO se puede modificar, 'tuple': ()
lista2 = ("Guido", "Pastorino")
lista2[0] = "Elon"
print(lista2) # 'tuple' object does not support item assignment

# ----------

# SET
# No se puede acceder al valor pero si se puede reescribir, ademas no almacena datos duplicados. Son datos desordenados
setData = {"Guido", "Pastorino", True}
print(setData)

# ----------

# DICCIONARIOS
# Tienen una notacion similar a la de JSON. Almacenan clave y valor

diccionario = {
    "Nombre": "Guido",
    "Apellido": "Pastorino",
    "Edad": 18,
    "Masculino": True
}

print(diccionario)

# Acceder a los valores del diccionario
print(diccionario["Nombre"]) # Guido
print(diccionario["Apellido"]) # Pastorino


# Modificar un valor
diccionario["Edad"] = 20
print(diccionario["Edad"]) # 20

# Eliminar una propiedad
del diccionario["Masculino"]
print(diccionario["Masculino"]) # KeyError: 'masculino'

# Métodos más comunes de los diccionarios:
# keys() : Retorna una lista de todas las propiedades del diccionario
# values() : Retorna una lista de todos los valores del diccionario
# items() : Retorna una lista de todas las partes (key, value) del diccionario
# get() : Retorna el valor de la propiedad indicada, si no existe la propiedad, retorna None
# update() : Actualiza/añade elementos al diccionario
# pop() : Extrae una propiedad que se le pasa como argumento. 
# popitem() : Extrae la ultima propiedad que tenga el diccionario al azar. 
# clear() : Vacía el diccionario
print(diccionario.keys())
print(diccionario.values())
print(diccionario.items())
print(diccionario.get("Apellidos"))
diccionario.update({"Profesión": "Programador", "Campo de interés": "Ingeniería de Software"})
diccionario.pop("Nombre") # Extrae Nombre (lo podemos almacenar en una variable también)
diccionario.popitem() # Extrae la ultima propiedad
print(diccionario)
diccionario.clear() # {}
print(diccionario)
_______________________________________________________________________________________
# OPERADORES ARITMÉTICOS

# Suma
suma = 1 + 2
print(f"suma: {suma}") # 3

# Resta
resta = 10 - 5
print(f"resta: {resta}") # 5

# Multiplicación
multiplicacion = 5 * 5
print(f"multiplicacion: {multiplicacion}") # 25

# División
division = 90 / 9 # Nos devuelve un número de tipo "float"
print(f"division: {division}") # 10.0

# División doble
divisionDoble = 15 // 3 # Nos devuelve un número de tipo "int"
print(f"division doble: {divisionDoble}") # 5

# Módulo
mod = 4 % 2
print(f"modulo: {mod}") # 0

# Exponente
expt = 5 ** 2
print(f"exponente: {expt}") # 25

_______________________________________________________________________________________
# OPERADORES DE COMPARACIÓN

numero = 10

# Es igual
print(numero == 10) # True

# No es igual
print(numero != 30) # True

# Es mayor
print(numero > 5) # True

# Es mayor o igual
print(numero >= 90) # False

# Es menor
print(numero < 45) # True

# Es menor o igual
print(numero <= 65) # True

_______________________________________________________________________________________
# CONDICIONALES (if/else/elif)

ingresoMensual = 10000
gastoMensual = 9000

if ingresoMensual >= 10000:
    if ingresoMensual - gastoMensual <= 1000:
        print("Estas bien económicamente en cualquier país pero estás gastando muchisimo")
    else:
        print("Estas bien económicamente en cualquier país y estás moderando tus gastos")
elif ingresoMensual >= 1000:
    print("Estas bien económicamente solo en latinoamérica")
else:
    print("No estás bien económicamente")


_______________________________________________________________________________________
OPERADORES LÓGICOS

# Existen dos tipos de operadores lógicos en Python.

# Operadores de expresión buleana.
# Se utilizan los operadores lógicos and para verificar si ambas expresiones son verdaderas y los resultados se combinan para producir un resultado booleano.
# and, or, not

x = 5
y = 2

if x > 4 and y == 2:
    print("Es mayor a cuatro e igual a dos")

print(not False)


# Operadores bit a bit
# Los operadores bit a bit &, | y ~ se utilizan para realizar operaciones de bits en enteros y producir un resultado en binario.

print(True & False)
print(True | False)
print(not False)

_______________________________________________________________________________________
MOSTRAR COCIENTE Y RESTO

# divmod()
print(divmod(10, 5))
# returns -> (quotient, remainder)
# (2, 0)
_______________________________________________________________________________________
METODOS DE CADENAS (Strings)

# str.lower()
# Devuelve una copia de la cadena con todos los caracteres en minúscula.
print("Hello world".lower()) # hello world


# str.upper()
# Devuelve una copia de la cadena con todos los caracteres en mayúscula.
print("Hello world".upper()) # HELLO WORLD


# str.title()
# Devuelve una copia de la cadena con cada palabra empezando en mayúscula
print("hello world from python!".title()) # Hello World From Python!


# str.swapcase()
# Devuelve una copia de la cadena con las mayúsculas convertidas en minúsculas y viceversa
print("Hello World From Python!".swapcase()) # hELLO wORLD fROM pYTHON!


# str.strip([chars])
# Devuelve una copia de la cadena con los caracteres iniciales y finales especificados eliminados. Si no se especifica chars, elimina espacios en blanco.
print("                  A legal occurence has been delayed      ".strip()) # A legal occurence has been delayed


# str.replace(old, new, count)
# Devuelve una copia de la cadena con todas las ocurrencias de old reemplazadas por new. La opción count limita el número de reemplazos.
print("Python es un lenguaje de programación. Python además sirve para web".replace("Python", "JavaScript", 1)) # JavaScript es un lenguaje de programación. Python además sirve para web


# split(sep)
# Divide la cadena en una lista de subcadenas utilizando sep como delimitador.
ex1 = "Hola buenos dias".split(" ")
print(ex1) # ['Hola', 'buenos', 'dias']


# str.join(iterable)
# Une una lista de subcadenas en un único string.
textArr = ["Hola", "buenos", "dias."]
ex2 = " ".join(textArr)
print(ex2) # Hola buenos dias.


# str.count(sub[, start[, end]])
# Cuenta el numero de ocurrencias de una subcadena en una cadena.
stringToCount = "hola hola como estas?"
substringCounts = stringToCount.count("hola")
print(substringCounts) # 2


# str.startsWith(str)
# Retorna true si la cadena empieza con la cadena que le pasamos
print("Texto de ejemplo".startswith("Hola")) # False


# str.endsWith(str)
# Retorna true si la cadena termina con la cadena que le pasamos
print("Que linda mañana".endswith("mañana")) # True


# str.isalpha(), str.isdigit(), str.isalnum(), str.isspace():
# Descripción: Devuelven True si la cadena contiene solo letras, dígitos, caracteres alfanuméricos o espacios en blanco, respectivamente.
print("Hola".isalpha()) # True
print("12345".isdigit()) # True
print("Hola123".isalnum()) # True
print(" ".isspace()) # True


# str.index(sub[, start[, end]])
# Devuelve la posición de la primera ocurrencia de sub en la cadena o produce una excepción si no se encuentra.
print("Texto de ejemplo".index("ejemplo")) # 9


# str.find(str)
# Devuelve la posición de la primera ocurrencia de sub en la cadena, o -1 si no se encuentra.
print("Hello from python!, I love python.".find("python")) # 11


# str.rfind(str)
# Devuelve la posición de la primera ocurrencia de sub en la cadena, o -1 si no se encuentra.
print("Hello from python!, I love python.".rfind("python")) # 27


# str.center(width, fillChar)
# Devuelve una copia de la cadena centrada en un campo de ancho width, opcionalmente rellenado con fillchar.
print("Python".center(20, "-")) # -------Python-------


# str.removesuffix(str)
# Remueve todo lo que va antes de la cadena pasada 
print("name@example.com".removesuffix("@example.com")) # name


# str.removeprefix(str)
# Remueve todo lo que va despues de la cadena pasada
print("name@example.com".removeprefix("name")) # @example.com

_______________________________________________________________________________________
LOOPS

# LOOPS

fruitsList = ["Apple", "Watermelon", "Strawberry", "Orange", "Banana"]

# ----- for loop -----

for fruit in fruitsList:
    print(fruit)


# Looping throught a string
for x in "Hello World":
    print(x)


# The break statement
# With the break statement we can stop the loop before it has looped through all the items:
for x in range(10):
    if x == 5:
        break
    else:
        print(x)


# The continue statement
# With the continue statement we can stop the current iteration of the loop, and continue with the next:

# This loop will print all numbers between 0 and 9 but will not print the number 5
for i in range(10):
    if i == 5:
        continue
    else:
        print(i)


# The range() function
# The range(num | nums interval (start, stop) | nums interval with increment/steps (start, stop, steps)) function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.

# Notice that range(5) is not (0, 5) but (0, 4)
for x in range(5):
    print(x)

for x in range(3, 6):
    print(x)


# Nested loops
for j in range(5):
    for k in range(5):
        print(j, k)


# The pass Statement
# for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.

for x in range(10):
    pass




# ----- while loop -----


i = 1


# The continue statement
while i < 5:
    if i == 3:
        continue
    else:
        print(i)
        i += 1
        


# The break statement
while i < 10:
    if i == 6:
        break
    else:
        print(i)
        i += 1


# condition when a while loop is over
while i < 10:
    print(i)
    i += 1
else:
    print("No numbers to print")

_______________________________________________________________________________________
LAMBDA FUNCTIONS

# Syntax
# lambda arguments : expression

x = lambda a , b : a // b
print(x(20, 10)) # 2

_______________________________________________________________________________________
CLASSES AND OBJECTS (Object Oriented Programming)

class Person:
    # __init__
    # The main method in a class. It allows us to create our objects later with variables
    # This method always needs to start with a "self" word, it represents the object itself, and later we can pass other variables
    # Notice that all the code below the __init__ method will be auto-executed by default.
    def __init__(self, name: str, surname: str, age: int, country: str):
        # To add the values to the variables, we can call self with the others variables like: self.var = var
        self.name = name
        self.surname = surname
        self.age = age
        self.country = country
        
        # The assert keyword allow us to make validations inside our class
        # @params: conditional, errorMessage
        assert age > 0 and age < 100, f"The age of the person {name} is not a valid age"
        
    # __repr__
    # This method allows us to represent the object when it is printed or other ocasions, showing all the variables
    def __repr__(self):
        return f"Person: {self.name}, {self.surname}, {self.age}, {self.country}"
    
    
    # Class methods
    # A class method is a method that’s shared among all objects. Class methods can be can be called from instances and from the class itself. All of these use the same method. The method can use the classes variables and methods.
    # Note: You can omit add the "classmethod" reserved word at the begin of the method.
    
    # classmethod
    def printName(self):
        print(f"The Person class name is: {self.name}")
        
    def printAge(self):
        print(f"The Person class age is: {self.age}")
    
    
# Creating an instance from the class Person:
p1 = Person("Guido", "Pastorino", 18, "Argentina")

print(p1) # Person: Guido, Pastorino, 18, Argentina

# Updating
p1.name = "User"

# Calling object methods
p1.printName() # The Person name is: User
p1.printAge() # The Person age is: 18

# Deleting
del p1.name
del p1



# ----- Inheritance -----
# We are creating a second class (child from the Person class)
class AdultPerson(Person):
    # We call the super() method to avoid to overwrite the self object.
    def __init__(self, name: str, surname: str, age: int, country: str):
        super().__init__(name, surname, age, country)
        assert age >= 18, f"The person age ({age}) needs to be more or equal than 18 years old."
        print("Child class has been created!")
        
        
    def sayHi(self):
        print("Hello from the child class")
        

p2 = AdultPerson("Osvaldo", "Guanavirre", 56, "Netherlands")
print(p2) # Person: Osvaldo, Guanavirre, 56, Netherlands
p2.printName() # The Person class name is: Osvaldo
p2.sayHi()
del p2.name # deleting name from the p2 AdultPerson object


_______________________________________________________________________________________
TRY / EXCEPT - Error handling

try:
    print(x)
except NameError: 
    print("Variable x is not defined")
except:
    print("An error have ocurred")
finally:
    print("The check have finished.")

# Variable x is not defined
# The check have finished.


_______________________________________________________________________________________
MATCH/CASE

Match statement allow us to run x code in x case on a result. syntax:

match <var>:
    case <val>:
        print(val)
    case _:
        print("Default case (no match found)")

---

myVar = 5

match myVar:
    case 1:
        print(myVar)
    case 2:
        print(myVar)
    case __:
        print("No case matched with myVar")


_______________________________________________________________________________________
LIST COMPREHENSION

syntax:

# without condition (filters)
new_list = [expression for element in iterable]

# with condition (filters)
new_list = [expression for element in iterable if condition]
new_list = [expression (if/else) for element in iterable]



# example:

arr = [1,2,3,4,5,6,7,8,9,10]

new_arr = [i for i in arr] # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
new_arr = [i for i in arr if i >= 5] # [5, 6, 7, 8, 9, 10]
new_arr = ["YES" if i >= 10 else "NO" for i in arr] # ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'YES']



_______________________________________________________________________________________
ONELINE CONDITIONAL VARIABLE value

var = expression_1 if condition else expression_2

ex:
num = 10 if 1 > 10 else 1

_______________________________________________________________________________________
DATA STRUCTURES

course link: https://www.geeksforgeeks.org/data-structures/

1. ---------- LINKED LISTS ----------



